{"ast":null,"code":"import axios from 'axios';\nimport { REQUEST, SUCCESS, FAILURE } from '../../shared/reducers/action-type.util';\nimport { defaultValue } from '../../shared/model/student.model';\nimport parseHeaderForLinks from '../../shared/parseHeaderForLinks';\nexport const ACTION_TYPES = {\n  FETCH_STUDENT_LIST: 'student/FETCH_STUDENT_LIST',\n  FETCH_STUDENT: 'student/FETCH_STUDENT',\n  ADD_STUDENT: 'student/ADD_STUDENT',\n  UPDATE_STUDENT: 'student/UPDATE_STUDENT',\n  DELETE_STUDENT: 'student/DELETE_STUDENT',\n  CHECKED_STUDENT: 'student/CHECKED_STUDENT',\n  DELETE_BATCH_STUDENT: 'student/DELETE_BATCH_STUDENT',\n  RESET: 'student/RESET'\n};\nconst initialState = {\n  loading: false,\n  updating: false,\n  updateSuccess: false,\n  errorMessage: null,\n  entities: [],\n  entity: defaultValue,\n  links: {\n    next: 0\n  },\n  totalItems: 0,\n  checked: {}\n};\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_STUDENT_LIST):\n    case REQUEST(ACTION_TYPES.FETCH_STUDENT):\n      return { ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true,\n        checked: {}\n      };\n\n    case REQUEST(ACTION_TYPES.ADD_STUDENT):\n    case REQUEST(ACTION_TYPES.UPDATE_STUDENT):\n    case REQUEST(ACTION_TYPES.DELETE_STUDENT):\n    case REQUEST(ACTION_TYPES.DELETE_BATCH_STUDENT):\n      return { ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true,\n        checked: {}\n      };\n\n    case FAILURE(ACTION_TYPES.FETCH_STUDENT_LIST):\n    case FAILURE(ACTION_TYPES.FETCH_STUDENT):\n    case FAILURE(ACTION_TYPES.ADD_STUDENT):\n    case FAILURE(ACTION_TYPES.UPDATE_STUDENT):\n    case FAILURE(ACTION_TYPES.DELETE_STUDENT):\n    case FAILURE(ACTION_TYPES.DELETE_BATCH_STUDENT):\n      return { ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n\n    case SUCCESS(ACTION_TYPES.FETCH_STUDENT_LIST):\n      {\n        var _action$payload$data;\n\n        const links = parseHeaderForLinks(action.payload.headers.link);\n        const entities = (_action$payload$data = action.payload.data) !== null && _action$payload$data !== void 0 ? _action$payload$data : [];\n        const checked = {};\n        entities.map(({\n          _id\n        }) => {\n          if (typeof _id === 'string') checked[_id] = false;\n        });\n        return { ...state,\n          loading: false,\n          links,\n          entities,\n          checked,\n          totalItems: parseInt(action.payload.headers['x-total-count'], 10)\n        };\n      }\n\n    case SUCCESS(ACTION_TYPES.FETCH_STUDENT):\n      return { ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n\n    case SUCCESS(ACTION_TYPES.ADD_STUDENT):\n    case SUCCESS(ACTION_TYPES.UPDATE_STUDENT):\n    case SUCCESS(ACTION_TYPES.DELETE_STUDENT):\n    case SUCCESS(ACTION_TYPES.DELETE_BATCH_STUDENT):\n      return { ...state,\n        updating: false,\n        updateSuccess: true\n      };\n\n    case ACTION_TYPES.CHECKED_STUDENT:\n      return { ...state,\n        checked: { ...state.checked,\n          [action.payload.id]: action.payload.checked\n        }\n      };\n\n    case ACTION_TYPES.RESET:\n      return { ...initialState\n      };\n\n    default:\n      return state;\n  }\n});\nconst apiUrl = 'students'; // Actions\n\nexport const getEntities = (page = 1) => {\n  const requestUrl = `${apiUrl}?page=${page}`;\n  return {\n    type: ACTION_TYPES.FETCH_STUDENT_LIST,\n    payload: axios.get(`${requestUrl}&cacheBuster=${new Date().getTime()}`)\n  };\n};\nexport const getEntity = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_STUDENT,\n    payload: axios.get(requestUrl)\n  };\n};\nexport const updateStudent = (id, model) => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.UPDATE_STUDENT,\n    payload: axios.put(requestUrl, model)\n  };\n};\nexport const createStudent = model => {\n  const requestUrl = apiUrl;\n  return {\n    type: ACTION_TYPES.ADD_STUDENT,\n    payload: axios.post(requestUrl, model)\n  };\n};\nexport const deleteStudent = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.DELETE_STUDENT,\n    payload: axios.delete(requestUrl)\n  };\n};\nexport const deleteBatchStudent = model => {\n  const requestUrl = `${apiUrl}/deletemany`;\n  return {\n    type: ACTION_TYPES.DELETE_BATCH_STUDENT,\n    payload: axios.post(requestUrl, model)\n  };\n};\nexport const checkedStudent = (id, checked) => {\n  return {\n    type: ACTION_TYPES.CHECKED_STUDENT,\n    payload: {\n      id,\n      checked\n    }\n  };\n};\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});","map":{"version":3,"sources":["/home/daniel/Escritorio/Code /CodeChange/client/src/entities/students/student.reducer.ts"],"names":["axios","REQUEST","SUCCESS","FAILURE","defaultValue","parseHeaderForLinks","ACTION_TYPES","FETCH_STUDENT_LIST","FETCH_STUDENT","ADD_STUDENT","UPDATE_STUDENT","DELETE_STUDENT","CHECKED_STUDENT","DELETE_BATCH_STUDENT","RESET","initialState","loading","updating","updateSuccess","errorMessage","entities","entity","links","next","totalItems","checked","state","action","type","payload","headers","link","data","map","_id","parseInt","id","apiUrl","getEntities","page","requestUrl","get","Date","getTime","getEntity","updateStudent","model","put","createStudent","post","deleteStudent","delete","deleteBatchStudent","checkedStudent","reset"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { REQUEST, SUCCESS, FAILURE, ICrudGetAllAction, ICrudGetAction } from '../../shared/reducers/action-type.util';\n\nimport { IStudent, defaultValue } from '../../shared/model/student.model';\nimport { IError, ILinks } from '../../shared/reducers/interfaces';\nimport parseHeaderForLinks from '../../shared/parseHeaderForLinks';\n\nexport const ACTION_TYPES = {\n\tFETCH_STUDENT_LIST: 'student/FETCH_STUDENT_LIST',\n\tFETCH_STUDENT: 'student/FETCH_STUDENT',\n\tADD_STUDENT: 'student/ADD_STUDENT',\n\tUPDATE_STUDENT: 'student/UPDATE_STUDENT',\n\tDELETE_STUDENT: 'student/DELETE_STUDENT',\n\tCHECKED_STUDENT: 'student/CHECKED_STUDENT',\n\tDELETE_BATCH_STUDENT: 'student/DELETE_BATCH_STUDENT',\n\tRESET: 'student/RESET',\n};\n\nconst initialState = {\n\tloading: false,\n\tupdating: false,\n\tupdateSuccess: false,\n\terrorMessage: null as IError | null,\n\tentities: [] as ReadonlyArray<IStudent>,\n\tentity: defaultValue,\n\tlinks: { next: 0 } as ILinks,\n\ttotalItems: 0,\n\tchecked: {} as { [key: string]: boolean }\n};\n\nexport type StudentState = Readonly<typeof initialState>;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state: StudentState = initialState, action: any): StudentState => {\n\tswitch (action.type) {\n\t\tcase REQUEST(ACTION_TYPES.FETCH_STUDENT_LIST):\n\t\tcase REQUEST(ACTION_TYPES.FETCH_STUDENT):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terrorMessage: null,\n\t\t\t\tupdateSuccess: false,\n\t\t\t\tloading: true,\n\t\t\t\tchecked: {}\n\t\t\t};\n\t\tcase REQUEST(ACTION_TYPES.ADD_STUDENT):\n\t\tcase REQUEST(ACTION_TYPES.UPDATE_STUDENT):\n\t\tcase REQUEST(ACTION_TYPES.DELETE_STUDENT):\n\t\tcase REQUEST(ACTION_TYPES.DELETE_BATCH_STUDENT):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\terrorMessage: null,\n\t\t\t\tupdateSuccess: false,\n\t\t\t\tupdating: true,\n\t\t\t\tchecked: {}\n\t\t\t};\n\t\tcase FAILURE(ACTION_TYPES.FETCH_STUDENT_LIST):\n\t\tcase FAILURE(ACTION_TYPES.FETCH_STUDENT):\n\t\tcase FAILURE(ACTION_TYPES.ADD_STUDENT):\n\t\tcase FAILURE(ACTION_TYPES.UPDATE_STUDENT):\n\t\tcase FAILURE(ACTION_TYPES.DELETE_STUDENT):\n\t\tcase FAILURE(ACTION_TYPES.DELETE_BATCH_STUDENT):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tupdating: false,\n\t\t\t\tupdateSuccess: false,\n\t\t\t\terrorMessage: action.payload,\n\t\t\t};\n\t\tcase SUCCESS(ACTION_TYPES.FETCH_STUDENT_LIST): {\n\t\t\tconst links = parseHeaderForLinks(action.payload.headers.link);\n\t\t\tconst entities: IStudent[] = action.payload.data ?? [];\n\t\t\tconst checked: { [key: string]: boolean } = {};\n\t\t\tentities.map(({ _id }) => {\n\t\t\t\tif (typeof _id === 'string')\n\t\t\t\t\tchecked[_id] = false;\n\t\t\t})\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tlinks,\n\t\t\t\tentities,\n\t\t\t\tchecked,\n\t\t\t\ttotalItems: parseInt(action.payload.headers['x-total-count'], 10),\n\t\t\t};\n\t\t}\n\t\tcase SUCCESS(ACTION_TYPES.FETCH_STUDENT):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\tentity: action.payload.data,\n\t\t\t};\n\t\tcase SUCCESS(ACTION_TYPES.ADD_STUDENT):\n\t\tcase SUCCESS(ACTION_TYPES.UPDATE_STUDENT):\n\t\tcase SUCCESS(ACTION_TYPES.DELETE_STUDENT):\n\t\tcase SUCCESS(ACTION_TYPES.DELETE_BATCH_STUDENT):\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tupdating: false,\n\t\t\t\tupdateSuccess: true,\n\t\t\t};\n\t\tcase ACTION_TYPES.CHECKED_STUDENT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tchecked: { ...state.checked, [action.payload.id]: action.payload.checked }\n\t\t\t}\n\t\tcase ACTION_TYPES.RESET:\n\t\t\treturn {\n\t\t\t\t...initialState,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst apiUrl = 'students';\n\n// Actions\n\nexport const getEntities: ICrudGetAllAction<IStudent> = (page = 1) => {\n\tconst requestUrl = `${apiUrl}?page=${page}`;\n\treturn {\n\t\ttype: ACTION_TYPES.FETCH_STUDENT_LIST,\n\t\tpayload: axios.get<IStudent>(`${requestUrl}&cacheBuster=${new Date().getTime()}`),\n\t};\n};\n\nexport const getEntity: ICrudGetAction<IStudent> = id => {\n\tconst requestUrl = `${apiUrl}/${id}`;\n\treturn {\n\t\ttype: ACTION_TYPES.FETCH_STUDENT,\n\t\tpayload: axios.get<IStudent>(requestUrl),\n\t};\n};\n\nexport const updateStudent = (id: any, model: any) => {\n\tconst requestUrl = `${apiUrl}/${id}`;\n\treturn {\n\t\ttype: ACTION_TYPES.UPDATE_STUDENT,\n\t\tpayload: axios.put<any>(requestUrl, model),\n\t};\n};\n\nexport const createStudent = (model: any) => {\n\tconst requestUrl = apiUrl;\n\treturn {\n\t\ttype: ACTION_TYPES.ADD_STUDENT,\n\t\tpayload: axios.post<any>(requestUrl, model),\n\t};\n};\n\nexport const deleteStudent = (id: any) => {\n\tconst requestUrl = `${apiUrl}/${id}`;\n\treturn {\n\t\ttype: ACTION_TYPES.DELETE_STUDENT,\n\t\tpayload: axios.delete<any>(requestUrl),\n\t};\n};\n\nexport const deleteBatchStudent = (model: any) => {\n\tconst requestUrl = `${apiUrl}/deletemany`;\n\treturn {\n\t\ttype: ACTION_TYPES.DELETE_BATCH_STUDENT,\n\t\tpayload: axios.post<any>(requestUrl, model),\n\t};\n};\n\nexport const checkedStudent = (id: any, checked: boolean) => {\n\treturn {\n\t\ttype: ACTION_TYPES.CHECKED_STUDENT,\n\t\tpayload: { id, checked }\n\t}\n}\n\nexport const reset = () => ({\n\ttype: ACTION_TYPES.RESET,\n});"]},"metadata":{},"sourceType":"module"}