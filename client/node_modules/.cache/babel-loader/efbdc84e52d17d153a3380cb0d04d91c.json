{"ast":null,"code":"import isPromise from 'is-promise';\nimport { toast } from 'react-toastify';\n\nconst addErrorAlert = (message, key, data) => {\n  toast.error(message);\n}; // eslint-disable-next-line import/no-anonymous-default-export\n\n\nexport default (() => next => action => {\n  // If not a promise, continue on\n  if (!isPromise(action.payload)) {\n    return next(action);\n  }\n  /**\n   *\n   * The notification middleware serves to dispatch the initial pending promise to\n   * the promise middleware, but adds a `then` and `catch.\n   */\n\n\n  return next(action).then(response => {\n    if (action.meta && action.meta.successMessage) {\n      toast.success(action.meta.successMessage);\n    } else if (response && response.action && response.action.payload && response.action.payload.headers) {\n      const headers = response.action.payload.headers;\n      let alert = null;\n      Object.entries(headers).forEach(([k, v]) => {\n        if (k.toLowerCase().endsWith('app-alert')) {\n          alert = v;\n        }\n      });\n\n      if (alert) {\n        toast.success(alert);\n      }\n    }\n\n    return Promise.resolve(response);\n  }).catch(error => {\n    if (action.meta && action.meta.errorMessage) {\n      toast.error(action.meta.errorMessage);\n    } else if (error && error.response) {\n      const response = error.response;\n      const data = response.data;\n\n      if (!(response.status === 401 && (error.message === '' || data && data.path && data.path.includes('/api/account')))) {\n        let i;\n\n        switch (response.status) {\n          // connection refused, server not reachable\n          case 0:\n            addErrorAlert('Server not reachable', 'error.server.not.reachable');\n            break;\n\n          case 400:\n            {\n              const headers = Object.entries(response.headers);\n              let errorHeader = null;\n              let entityKey = null;\n              headers.forEach(([k, v]) => {\n                if (k.toLowerCase().endsWith('app-error')) {\n                  errorHeader = v;\n                } else if (k.toLowerCase().endsWith('app-params')) {\n                  entityKey = v;\n                }\n              });\n\n              if (errorHeader) {\n                const entityName = entityKey;\n                addErrorAlert(errorHeader, errorHeader, {\n                  entityName\n                });\n              } else if (data !== '' && data.fieldErrors) {\n                const fieldErrors = data.fieldErrors;\n\n                for (i = 0; i < fieldErrors.length; i++) {\n                  const fieldError = fieldErrors[i];\n\n                  if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                    fieldError.message = 'Size';\n                  } // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n\n\n                  const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                  const fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                  addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, {\n                    fieldName\n                  });\n                }\n              } else if (data !== '' && data.message) {\n                addErrorAlert(data.message, data.message, data.params);\n              } else {\n                addErrorAlert(data);\n              }\n\n              break;\n            }\n\n          case 404:\n            addErrorAlert('Not found', 'error.url.not.found');\n            break;\n\n          default:\n            if (data !== '' && data.message) {\n              addErrorAlert(data.message);\n            } else {\n              addErrorAlert(data);\n            }\n\n        }\n      }\n    } else if (error && error.config && error.config.url === 'api/account' && error.config.method === 'get') {\n      /* eslint-disable no-console */\n      console.log('Authentication Error: Trying to access url api/account with GET.');\n    } else if (error && error.message) {\n      toast.error(error.message);\n    } else {\n      toast.error('Unknown error!');\n    }\n\n    return Promise.reject(error);\n  });\n});","map":{"version":3,"sources":["/home/daniel/Escritorio/Code /CodeChange/client/src/config/notification-middleware.ts"],"names":["isPromise","toast","addErrorAlert","message","key","data","error","next","action","payload","then","response","meta","successMessage","success","headers","alert","Object","entries","forEach","k","v","toLowerCase","endsWith","Promise","resolve","catch","errorMessage","status","path","includes","i","errorHeader","entityKey","entityName","fieldErrors","length","fieldError","convertedField","field","replace","fieldName","charAt","toUpperCase","slice","params","config","url","method","console","log","reject"],"mappings":"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","sourcesContent":["import isPromise from 'is-promise';\nimport { toast } from 'react-toastify';\n\nconst addErrorAlert = (message: any, key?: any, data?: any) => {\n  toast.error(message);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => (next: any) => (action: any) => {\n  // If not a promise, continue on\n  if (!isPromise(action.payload)) {\n    return next(action);\n  }\n\n  /**\n   *\n   * The notification middleware serves to dispatch the initial pending promise to\n   * the promise middleware, but adds a `then` and `catch.\n   */\n  return next(action)\n    .then((response: any) => {\n      if (action.meta && action.meta.successMessage) {\n        toast.success(action.meta.successMessage);\n      } else if (response && response.action && response.action.payload && response.action.payload.headers) {\n        const headers = response.action.payload.headers;\n        let alert: string | null = null;\n        Object.entries<string>(headers).forEach(([k, v]) => {\n          if (k.toLowerCase().endsWith('app-alert')) {\n            alert = v;\n          }\n        });\n        if (alert) {\n          toast.success(alert);\n        }\n      }\n      return Promise.resolve(response);\n    })\n    .catch((error: any) => {\n      if (action.meta && action.meta.errorMessage) {\n        toast.error(action.meta.errorMessage);\n      } else if (error && error.response) {\n        const response = error.response;\n        const data = response.data;\n        if (!(response.status === 401 && (error.message === '' || (data && data.path && data.path.includes('/api/account'))))) {\n          let i;\n          switch (response.status) {\n            // connection refused, server not reachable\n            case 0:\n              addErrorAlert('Server not reachable', 'error.server.not.reachable');\n              break;\n\n            case 400: {\n              const headers = Object.entries<string>(response.headers);\n              let errorHeader: string | null = null;\n              let entityKey: string | null = null;\n              headers.forEach(([k, v]) => {\n                if (k.toLowerCase().endsWith('app-error')) {\n                  errorHeader = v;\n                } else if (k.toLowerCase().endsWith('app-params')) {\n                  entityKey = v;\n                }\n              });\n              if (errorHeader) {\n                const entityName = entityKey;\n                addErrorAlert(errorHeader, errorHeader, { entityName });\n              } else if (data !== '' && data.fieldErrors) {\n                const fieldErrors = data.fieldErrors;\n                for (i = 0; i < fieldErrors.length; i++) {\n                  const fieldError = fieldErrors[i];\n                  if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {\n                    fieldError.message = 'Size';\n                  }\n                  // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                  const convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                  const fieldName = convertedField.charAt(0).toUpperCase() + convertedField.slice(1);\n                  addErrorAlert(`Error on field \"${fieldName}\"`, `error.${fieldError.message}`, { fieldName });\n                }\n              } else if (data !== '' && data.message) {\n                addErrorAlert(data.message, data.message, data.params);\n              } else {\n                addErrorAlert(data);\n              }\n              break;\n            }\n            case 404:\n              addErrorAlert('Not found', 'error.url.not.found');\n              break;\n\n            default:\n              if (data !== '' && data.message) {\n                addErrorAlert(data.message);\n              } else {\n                addErrorAlert(data);\n              }\n          }\n        }\n      } else if (error && error.config && error.config.url === 'api/account' && error.config.method === 'get') {\n        /* eslint-disable no-console */\n        console.log('Authentication Error: Trying to access url api/account with GET.');\n      } else if (error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Unknown error!');\n      }\n      return Promise.reject(error);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}